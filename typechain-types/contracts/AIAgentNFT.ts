/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AIAgentNFT {
  export type AgentMetadataStruct = {
    name: string;
    description: string;
    model: string;
    usageCost: BigNumberish;
    maxUsagesPerDay: BigNumberish;
    isForRent: boolean;
    rentPricePerUse: BigNumberish;
    ipfsHash: string;
    creator: AddressLike;
    createdAt: BigNumberish;
  };

  export type AgentMetadataStructOutput = [
    name: string,
    description: string,
    model: string,
    usageCost: bigint,
    maxUsagesPerDay: bigint,
    isForRent: boolean,
    rentPricePerUse: bigint,
    ipfsHash: string,
    creator: string,
    createdAt: bigint
  ] & {
    name: string;
    description: string;
    model: string;
    usageCost: bigint;
    maxUsagesPerDay: bigint;
    isForRent: boolean;
    rentPricePerUse: bigint;
    ipfsHash: string;
    creator: string;
    createdAt: bigint;
  };

  export type ToolConfigStruct = {
    enableWebSearch: boolean;
    enableCodeExecution: boolean;
    enableBrowserAutomation: boolean;
    enableWolframAlpha: boolean;
    enableStreaming: boolean;
    responseFormat: string;
    temperature: BigNumberish;
    maxTokens: BigNumberish;
    topP: BigNumberish;
    frequencyPenalty: BigNumberish;
    presencePenalty: BigNumberish;
  };

  export type ToolConfigStructOutput = [
    enableWebSearch: boolean,
    enableCodeExecution: boolean,
    enableBrowserAutomation: boolean,
    enableWolframAlpha: boolean,
    enableStreaming: boolean,
    responseFormat: string,
    temperature: bigint,
    maxTokens: bigint,
    topP: bigint,
    frequencyPenalty: bigint,
    presencePenalty: bigint
  ] & {
    enableWebSearch: boolean;
    enableCodeExecution: boolean;
    enableBrowserAutomation: boolean;
    enableWolframAlpha: boolean;
    enableStreaming: boolean;
    responseFormat: string;
    temperature: bigint;
    maxTokens: bigint;
    topP: bigint;
    frequencyPenalty: bigint;
    presencePenalty: bigint;
  };
}

export interface AIAgentNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "agentMetadata"
      | "approve"
      | "balanceOf"
      | "buyAgent"
      | "canUseAgent"
      | "consumeRentalUse"
      | "delistAgentFromSale"
      | "getAgentMetadata"
      | "getAgentsByOwner"
      | "getAgentsForRent"
      | "getAgentsForSale"
      | "getAgentsPaginated"
      | "getAllTokenIds"
      | "getApproved"
      | "getPrepaidInferenceBalance"
      | "getRentalBalance"
      | "getToolConfig"
      | "getTotalAgents"
      | "isApprovedForAll"
      | "isForSale"
      | "lastRentalUse"
      | "listAgentForSale"
      | "mintAgent"
      | "name"
      | "owner"
      | "ownerOf"
      | "prepaidInferenceBalances"
      | "renounceOwnership"
      | "rentAgent"
      | "rentAgentWithInference"
      | "rentalBalances"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "salePrice"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenOwners"
      | "tokenURI"
      | "toolConfig"
      | "transferFrom"
      | "transferOwnership"
      | "updateAgentMetadata"
      | "updateToolConfig"
      | "useAgent"
      | "useAgentPrepaid"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentDelistedFromSale"
      | "AgentListedForSale"
      | "AgentMinted"
      | "AgentRented"
      | "AgentSold"
      | "AgentTransferred"
      | "AgentUsed"
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "agentMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canUseAgent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeRentalUse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistAgentFromSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsForRent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentsPaginated",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrepaidInferenceBalance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalBalance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getToolConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAgents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRentalUse",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listAgentForSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAgent",
    values: [
      AddressLike,
      AIAgentNFT.AgentMetadataStruct,
      AIAgentNFT.ToolConfigStruct,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepaidInferenceBalances",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentAgent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentAgentWithInference",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentalBalances",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "salePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toolConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgentMetadata",
    values: [BigNumberish, AIAgentNFT.AgentMetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToolConfig",
    values: [BigNumberish, AIAgentNFT.ToolConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "useAgent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useAgentPrepaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "agentMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUseAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeRentalUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistAgentFromSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsForRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrepaidInferenceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAgents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isForSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRentalUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listAgentForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepaidInferenceBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rentAgentWithInference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toolConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgentMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "useAgent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useAgentPrepaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AgentDelistedFromSaleEvent {
  export type InputTuple = [tokenId: BigNumberish, seller: AddressLike];
  export type OutputTuple = [tokenId: bigint, seller: string];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentListedForSaleEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, seller: string, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    creator: AddressLike,
    name: string
  ];
  export type OutputTuple = [tokenId: bigint, creator: string, name: string];
  export interface OutputObject {
    tokenId: bigint;
    creator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentRentedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    renter: AddressLike,
    uses: BigNumberish,
    totalCost: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    renter: string,
    uses: bigint,
    totalCost: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    renter: string;
    uses: bigint;
    totalCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentSoldEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    seller: string,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentTransferredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, from: string, to: string];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentUsedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    isOwner: boolean
  ];
  export type OutputTuple = [tokenId: bigint, user: string, isOwner: boolean];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    isOwner: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIAgentNFT extends BaseContract {
  connect(runner?: ContractRunner | null): AIAgentNFT;
  waitForDeployment(): Promise<this>;

  interface: AIAgentNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  agentMetadata: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        model: string;
        usageCost: bigint;
        maxUsagesPerDay: bigint;
        isForRent: boolean;
        rentPricePerUse: bigint;
        ipfsHash: string;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  buyAgent: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  canUseAgent: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  consumeRentalUse: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  delistAgentFromSale: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAgentMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [AIAgentNFT.AgentMetadataStructOutput],
    "view"
  >;

  getAgentsByOwner: TypedContractMethod<
    [owner: AddressLike],
    [bigint[]],
    "view"
  >;

  getAgentsForRent: TypedContractMethod<[], [bigint[]], "view">;

  getAgentsForSale: TypedContractMethod<[], [bigint[]], "view">;

  getAgentsPaginated: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getAllTokenIds: TypedContractMethod<[], [bigint[]], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getPrepaidInferenceBalance: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getRentalBalance: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getToolConfig: TypedContractMethod<
    [tokenId: BigNumberish],
    [AIAgentNFT.ToolConfigStructOutput],
    "view"
  >;

  getTotalAgents: TypedContractMethod<[], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isForSale: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  lastRentalUse: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  listAgentForSale: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintAgent: TypedContractMethod<
    [
      to: AddressLike,
      metadata: AIAgentNFT.AgentMetadataStruct,
      config: AIAgentNFT.ToolConfigStruct,
      _tokenURI: string
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  prepaidInferenceBalances: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rentAgent: TypedContractMethod<
    [tokenId: BigNumberish, uses: BigNumberish],
    [void],
    "payable"
  >;

  rentAgentWithInference: TypedContractMethod<
    [tokenId: BigNumberish, uses: BigNumberish],
    [void],
    "payable"
  >;

  rentalBalances: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  salePrice: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenOwners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  toolConfig: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        enableWebSearch: boolean;
        enableCodeExecution: boolean;
        enableBrowserAutomation: boolean;
        enableWolframAlpha: boolean;
        enableStreaming: boolean;
        responseFormat: string;
        temperature: bigint;
        maxTokens: bigint;
        topP: bigint;
        frequencyPenalty: bigint;
        presencePenalty: bigint;
      }
    ],
    "view"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAgentMetadata: TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: AIAgentNFT.AgentMetadataStruct],
    [void],
    "nonpayable"
  >;

  updateToolConfig: TypedContractMethod<
    [tokenId: BigNumberish, newConfig: AIAgentNFT.ToolConfigStruct],
    [void],
    "nonpayable"
  >;

  useAgent: TypedContractMethod<[tokenId: BigNumberish], [boolean], "payable">;

  useAgentPrepaid: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "agentMetadata"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string,
        bigint
      ] & {
        name: string;
        description: string;
        model: string;
        usageCost: bigint;
        maxUsagesPerDay: bigint;
        isForRent: boolean;
        rentPricePerUse: bigint;
        ipfsHash: string;
        creator: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "canUseAgent"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "consumeRentalUse"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "delistAgentFromSale"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAgentMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [AIAgentNFT.AgentMetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentsByOwner"
  ): TypedContractMethod<[owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsForRent"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsForSale"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAgentsPaginated"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllTokenIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPrepaidInferenceBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRentalBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getToolConfig"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [AIAgentNFT.ToolConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalAgents"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isForSale"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRentalUse"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "listAgentForSale"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintAgent"
  ): TypedContractMethod<
    [
      to: AddressLike,
      metadata: AIAgentNFT.AgentMetadataStruct,
      config: AIAgentNFT.ToolConfigStruct,
      _tokenURI: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "prepaidInferenceBalances"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rentAgent"
  ): TypedContractMethod<
    [tokenId: BigNumberish, uses: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rentAgentWithInference"
  ): TypedContractMethod<
    [tokenId: BigNumberish, uses: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rentalBalances"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "salePrice"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOwners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "toolConfig"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        enableWebSearch: boolean;
        enableCodeExecution: boolean;
        enableBrowserAutomation: boolean;
        enableWolframAlpha: boolean;
        enableStreaming: boolean;
        responseFormat: string;
        temperature: bigint;
        maxTokens: bigint;
        topP: bigint;
        frequencyPenalty: bigint;
        presencePenalty: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgentMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: AIAgentNFT.AgentMetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateToolConfig"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newConfig: AIAgentNFT.ToolConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "useAgent"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "payable">;
  getFunction(
    nameOrSignature: "useAgentPrepaid"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AgentDelistedFromSale"
  ): TypedContractEvent<
    AgentDelistedFromSaleEvent.InputTuple,
    AgentDelistedFromSaleEvent.OutputTuple,
    AgentDelistedFromSaleEvent.OutputObject
  >;
  getEvent(
    key: "AgentListedForSale"
  ): TypedContractEvent<
    AgentListedForSaleEvent.InputTuple,
    AgentListedForSaleEvent.OutputTuple,
    AgentListedForSaleEvent.OutputObject
  >;
  getEvent(
    key: "AgentMinted"
  ): TypedContractEvent<
    AgentMintedEvent.InputTuple,
    AgentMintedEvent.OutputTuple,
    AgentMintedEvent.OutputObject
  >;
  getEvent(
    key: "AgentRented"
  ): TypedContractEvent<
    AgentRentedEvent.InputTuple,
    AgentRentedEvent.OutputTuple,
    AgentRentedEvent.OutputObject
  >;
  getEvent(
    key: "AgentSold"
  ): TypedContractEvent<
    AgentSoldEvent.InputTuple,
    AgentSoldEvent.OutputTuple,
    AgentSoldEvent.OutputObject
  >;
  getEvent(
    key: "AgentTransferred"
  ): TypedContractEvent<
    AgentTransferredEvent.InputTuple,
    AgentTransferredEvent.OutputTuple,
    AgentTransferredEvent.OutputObject
  >;
  getEvent(
    key: "AgentUsed"
  ): TypedContractEvent<
    AgentUsedEvent.InputTuple,
    AgentUsedEvent.OutputTuple,
    AgentUsedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AgentDelistedFromSale(uint256,address)": TypedContractEvent<
      AgentDelistedFromSaleEvent.InputTuple,
      AgentDelistedFromSaleEvent.OutputTuple,
      AgentDelistedFromSaleEvent.OutputObject
    >;
    AgentDelistedFromSale: TypedContractEvent<
      AgentDelistedFromSaleEvent.InputTuple,
      AgentDelistedFromSaleEvent.OutputTuple,
      AgentDelistedFromSaleEvent.OutputObject
    >;

    "AgentListedForSale(uint256,address,uint256)": TypedContractEvent<
      AgentListedForSaleEvent.InputTuple,
      AgentListedForSaleEvent.OutputTuple,
      AgentListedForSaleEvent.OutputObject
    >;
    AgentListedForSale: TypedContractEvent<
      AgentListedForSaleEvent.InputTuple,
      AgentListedForSaleEvent.OutputTuple,
      AgentListedForSaleEvent.OutputObject
    >;

    "AgentMinted(uint256,address,string)": TypedContractEvent<
      AgentMintedEvent.InputTuple,
      AgentMintedEvent.OutputTuple,
      AgentMintedEvent.OutputObject
    >;
    AgentMinted: TypedContractEvent<
      AgentMintedEvent.InputTuple,
      AgentMintedEvent.OutputTuple,
      AgentMintedEvent.OutputObject
    >;

    "AgentRented(uint256,address,uint256,uint256)": TypedContractEvent<
      AgentRentedEvent.InputTuple,
      AgentRentedEvent.OutputTuple,
      AgentRentedEvent.OutputObject
    >;
    AgentRented: TypedContractEvent<
      AgentRentedEvent.InputTuple,
      AgentRentedEvent.OutputTuple,
      AgentRentedEvent.OutputObject
    >;

    "AgentSold(uint256,address,address,uint256)": TypedContractEvent<
      AgentSoldEvent.InputTuple,
      AgentSoldEvent.OutputTuple,
      AgentSoldEvent.OutputObject
    >;
    AgentSold: TypedContractEvent<
      AgentSoldEvent.InputTuple,
      AgentSoldEvent.OutputTuple,
      AgentSoldEvent.OutputObject
    >;

    "AgentTransferred(uint256,address,address)": TypedContractEvent<
      AgentTransferredEvent.InputTuple,
      AgentTransferredEvent.OutputTuple,
      AgentTransferredEvent.OutputObject
    >;
    AgentTransferred: TypedContractEvent<
      AgentTransferredEvent.InputTuple,
      AgentTransferredEvent.OutputTuple,
      AgentTransferredEvent.OutputObject
    >;

    "AgentUsed(uint256,address,bool)": TypedContractEvent<
      AgentUsedEvent.InputTuple,
      AgentUsedEvent.OutputTuple,
      AgentUsedEvent.OutputObject
    >;
    AgentUsed: TypedContractEvent<
      AgentUsedEvent.InputTuple,
      AgentUsedEvent.OutputTuple,
      AgentUsedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface INFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRentalBalance"
      | "approve"
      | "balanceOf"
      | "getAgentInfo"
      | "getApproved"
      | "getEncryptedURI"
      | "getMetadataHash"
      | "getRentalInfo"
      | "getUsageStats"
      | "grantAuthorization"
      | "isApprovedForAll"
      | "isAuthorized"
      | "mintINFT"
      | "name"
      | "oracle"
      | "owner"
      | "ownerOf"
      | "recordUsage"
      | "renounceOwnership"
      | "revokeAuthorization"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "secureTransfer"
      | "setApprovalForAll"
      | "setOracle"
      | "setRentalStatus"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "updateMetadata"
      | "useRentalBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentUsed"
      | "Approval"
      | "ApprovalForAll"
      | "AuthorizationGranted"
      | "AuthorizationRevoked"
      | "MetadataUpdated"
      | "OwnershipTransferred"
      | "RentableStatusChanged"
      | "RentalBalanceAdded"
      | "RentalBalanceUsed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addRentalBalance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsageStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAuthorization",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintINFT",
    values: [AddressLike, string, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordUsage",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthorization",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secureTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRentalStatus",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useRentalBalance",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRentalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgentInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintINFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secureTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRentalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useRentalBalance",
    data: BytesLike
  ): Result;
}

export namespace AgentUsedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    cost: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, user: string, cost: bigint];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizationGrantedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    expiresAt: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, user: string, expiresAt: bigint];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    expiresAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizationRevokedEvent {
  export type InputTuple = [tokenId: BigNumberish, user: AddressLike];
  export type OutputTuple = [tokenId: bigint, user: string];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newEncryptedURI: string,
    newHash: BytesLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newEncryptedURI: string,
    newHash: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    newEncryptedURI: string;
    newHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentableStatusChangedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    isRentable: boolean,
    pricePerUse: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    isRentable: boolean,
    pricePerUse: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    isRentable: boolean;
    pricePerUse: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalBalanceAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalBalanceUsedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INFT extends BaseContract {
  connect(runner?: ContractRunner | null): INFT;
  waitForDeployment(): Promise<this>;

  interface: INFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRentalBalance: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getAgentInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        agentId: string;
        originalCreator: string;
        usageCost: bigint;
        maxUsagesPerDay: bigint;
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEncryptedURI: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getMetadataHash: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getRentalInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        isRentable: boolean;
        pricePerUse: bigint;
        userBalance: bigint;
      }
    ],
    "view"
  >;

  getUsageStats: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        currentUsages: bigint;
        maxUsagesPerDay: bigint;
        lastReset: bigint;
        usageCost: bigint;
      }
    ],
    "view"
  >;

  grantAuthorization: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorized: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  mintINFT: TypedContractMethod<
    [
      to: AddressLike,
      agentId: string,
      encryptedURI: string,
      metadataHash: BytesLike,
      usageCost: BigNumberish,
      maxUsagesPerDay: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  recordUsage: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeAuthorization: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  secureTransfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;

  setRentalStatus: TypedContractMethod<
    [tokenId: BigNumberish, isRentable: boolean, pricePerUse: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMetadata: TypedContractMethod<
    [
      tokenId: BigNumberish,
      newEncryptedURI: string,
      newMetadataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  useRentalBalance: TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRentalBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        agentId: string;
        originalCreator: string;
        usageCost: bigint;
        maxUsagesPerDay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMetadataHash"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRentalInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [boolean, bigint, bigint] & {
        isRentable: boolean;
        pricePerUse: bigint;
        userBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUsageStats"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        currentUsages: bigint;
        maxUsagesPerDay: bigint;
        lastReset: bigint;
        usageCost: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAuthorization"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike, expiresAt: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintINFT"
  ): TypedContractMethod<
    [
      to: AddressLike,
      agentId: string,
      encryptedURI: string,
      metadataHash: BytesLike,
      usageCost: BigNumberish,
      maxUsagesPerDay: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "recordUsage"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeAuthorization"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "secureTransfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRentalStatus"
  ): TypedContractMethod<
    [tokenId: BigNumberish, isRentable: boolean, pricePerUse: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      newEncryptedURI: string,
      newMetadataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "useRentalBalance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, user: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AgentUsed"
  ): TypedContractEvent<
    AgentUsedEvent.InputTuple,
    AgentUsedEvent.OutputTuple,
    AgentUsedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizationGranted"
  ): TypedContractEvent<
    AuthorizationGrantedEvent.InputTuple,
    AuthorizationGrantedEvent.OutputTuple,
    AuthorizationGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizationRevoked"
  ): TypedContractEvent<
    AuthorizationRevokedEvent.InputTuple,
    AuthorizationRevokedEvent.OutputTuple,
    AuthorizationRevokedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RentableStatusChanged"
  ): TypedContractEvent<
    RentableStatusChangedEvent.InputTuple,
    RentableStatusChangedEvent.OutputTuple,
    RentableStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "RentalBalanceAdded"
  ): TypedContractEvent<
    RentalBalanceAddedEvent.InputTuple,
    RentalBalanceAddedEvent.OutputTuple,
    RentalBalanceAddedEvent.OutputObject
  >;
  getEvent(
    key: "RentalBalanceUsed"
  ): TypedContractEvent<
    RentalBalanceUsedEvent.InputTuple,
    RentalBalanceUsedEvent.OutputTuple,
    RentalBalanceUsedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AgentUsed(uint256,address,uint256)": TypedContractEvent<
      AgentUsedEvent.InputTuple,
      AgentUsedEvent.OutputTuple,
      AgentUsedEvent.OutputObject
    >;
    AgentUsed: TypedContractEvent<
      AgentUsedEvent.InputTuple,
      AgentUsedEvent.OutputTuple,
      AgentUsedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "AuthorizationGranted(uint256,address,uint256)": TypedContractEvent<
      AuthorizationGrantedEvent.InputTuple,
      AuthorizationGrantedEvent.OutputTuple,
      AuthorizationGrantedEvent.OutputObject
    >;
    AuthorizationGranted: TypedContractEvent<
      AuthorizationGrantedEvent.InputTuple,
      AuthorizationGrantedEvent.OutputTuple,
      AuthorizationGrantedEvent.OutputObject
    >;

    "AuthorizationRevoked(uint256,address)": TypedContractEvent<
      AuthorizationRevokedEvent.InputTuple,
      AuthorizationRevokedEvent.OutputTuple,
      AuthorizationRevokedEvent.OutputObject
    >;
    AuthorizationRevoked: TypedContractEvent<
      AuthorizationRevokedEvent.InputTuple,
      AuthorizationRevokedEvent.OutputTuple,
      AuthorizationRevokedEvent.OutputObject
    >;

    "MetadataUpdated(uint256,string,bytes32)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RentableStatusChanged(uint256,bool,uint256)": TypedContractEvent<
      RentableStatusChangedEvent.InputTuple,
      RentableStatusChangedEvent.OutputTuple,
      RentableStatusChangedEvent.OutputObject
    >;
    RentableStatusChanged: TypedContractEvent<
      RentableStatusChangedEvent.InputTuple,
      RentableStatusChangedEvent.OutputTuple,
      RentableStatusChangedEvent.OutputObject
    >;

    "RentalBalanceAdded(uint256,address,uint256)": TypedContractEvent<
      RentalBalanceAddedEvent.InputTuple,
      RentalBalanceAddedEvent.OutputTuple,
      RentalBalanceAddedEvent.OutputObject
    >;
    RentalBalanceAdded: TypedContractEvent<
      RentalBalanceAddedEvent.InputTuple,
      RentalBalanceAddedEvent.OutputTuple,
      RentalBalanceAddedEvent.OutputObject
    >;

    "RentalBalanceUsed(uint256,address,uint256)": TypedContractEvent<
      RentalBalanceUsedEvent.InputTuple,
      RentalBalanceUsedEvent.OutputTuple,
      RentalBalanceUsedEvent.OutputObject
    >;
    RentalBalanceUsed: TypedContractEvent<
      RentalBalanceUsedEvent.InputTuple,
      RentalBalanceUsedEvent.OutputTuple,
      RentalBalanceUsedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
